/**
 * Deploy Research & Documentation Agent
 * Execute deep claude-modular framework research mission
 */

import { ResearchDocumentationAgent } from './UBOS_AGENTS/agents/research-documentation/researchDocumentationAgent.js';
import { AgentRunOptions } from './UBOS/src/agents/baseAgent.js';
import path from 'path';
import { promises as fs } from 'fs';

async function deployAndExecute() {
  console.log('🚀 DEPLOYING RESEARCH & DOCUMENTATION AGENT');
  console.log('Mission: Deep research on claude-modular framework using Perplexity Sonar');
  
  // Initialize agent
  const agent = new ResearchDocumentationAgent('research-001', 'claude-modular-research');
  
  // Configure research mission
  const researchMission = `
Execute deep research mission on the claude-modular framework using Perplexity Sonar models.

Primary research targets:
1. Claude-modular framework architecture and design patterns
2. Token optimization techniques and implementation strategies  
3. Command structures and API patterns
4. Security implementations and best practices
5. Advanced usage patterns and optimization principles
6. Integration with existing systems and frameworks
7. Performance characteristics and benchmarking data
8. Community adoption and real-world use cases

Research depth: deep
Output: Enhanced documentation in UBOS_AGENTS/General-Tools/frameworks/claude-modular/
Follow-up queries: comprehensive analysis of implementation strategies, optimization techniques, and security patterns
`;

  const options: AgentRunOptions = {
    input: researchMission,
    dryRun: false
  };

  try {
    console.log('📡 Executing research mission...');
    const result = await agent.run(options);
    
    if (result.success) {
      console.log('✅ RESEARCH MISSION COMPLETED');
      console.log(`📊 Research Cost: $${result.metadata?.researchCost || 'N/A'}`);
      console.log(`🎯 Confidence: ${result.metadata?.confidence ? Math.round(result.metadata.confidence * 100) : 'N/A'}%`);
      console.log(`📁 Documentation Path: ${result.metadata?.documentationPath || 'N/A'}`);
      console.log('\n📋 RESEARCH RESULTS:');
      console.log(result.output);
      
      // Save deployment report
      const reportPath = path.join(process.cwd(), 'UBOS_AGENTS', 'General-Tools', 'deployment-reports', 'claude-modular-research-mission.md');
      await fs.mkdir(path.dirname(reportPath), { recursive: true });
      
      const report = `# Claude-Modular Framework Research Mission Report

## Mission Details
- **Agent**: Research & Documentation Agent
- **Mission ID**: claude-modular-research
- **Executed**: ${new Date().toISOString()}
- **Research Model**: Perplexity Sonar Reasoning

## Results
- **Status**: ${result.success ? 'SUCCESS' : 'FAILED'}
- **Cost**: $${result.metadata?.researchCost || 'N/A'}
- **Confidence**: ${result.metadata?.confidence ? Math.round(result.metadata.confidence * 100) : 'N/A'}%
- **Documentation Path**: ${result.metadata?.documentationPath || 'N/A'}

## Research Output
${result.output}

## Metadata
\`\`\`json
${JSON.stringify(result.metadata, null, 2)}
\`\`\`

---
*Generated by UBOS Research & Documentation Agent*
`;

      await fs.writeFile(reportPath, report);
      console.log(`\n📄 Deployment report saved: ${reportPath}`);
      
    } else {
      console.error('❌ RESEARCH MISSION FAILED');
      console.error('Error:', result.error);
    }
    
  } catch (error: any) {
    console.error('💥 DEPLOYMENT FAILED:', error.message);
    console.error(error.stack);
  }
}

// Execute if run directly
deployAndExecute()
  .then(() => {
    console.log('\n🎉 Deployment complete');
    process.exit(0);
  })
  .catch(error => {
    console.error('💥 Fatal error:', error);
    process.exit(1);
  });

export { deployAndExecute };