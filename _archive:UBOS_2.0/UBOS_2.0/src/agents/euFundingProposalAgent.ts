import { BaseAgent, AgentRunOptions, AgentContext } from './baseAgent.js';
import { AgentResult } from '../orchestrator/types.js';
import { AgentSummoner } from './agentSummoner.js';
import path from 'path';
import { promises as fs } from 'fs';

interface ProposalTemplateOptions {
  programme?: string; // e.g., Horizon Europe, LIFE, CEF
  callId?: string;
  topic?: string;
  beneficiaryType?: string; // SME, University, NGO, Consortium
}

function sanitizeFilename(name: string): string {
  return name.replace(/[^a-z0-9_-]+/gi, '_').slice(0, 80);
}

function buildTemplateTitle(input: string, opts: ProposalTemplateOptions, analyzedDomain?: string): string {
  const prog = opts.programme ? `${opts.programme} ` : '';
  const topic = opts.topic ? ` – ${opts.topic}` : '';
  const domain = analyzedDomain && analyzedDomain !== 'Not specified' ? ` [${analyzedDomain}]` : '';
  return `${prog}EU Funding Proposal Template${topic}${domain}`.trim();
}

function renderProposalTemplate(title: string, opts: ProposalTemplateOptions, advisoryNote?: string): string {
  const lines: string[] = [];
  lines.push(`# ${title}`);
  if (opts.callId) lines.push(`Call ID: ${opts.callId}`);
  if (opts.programme) lines.push(`Programme: ${opts.programme}`);
  if (opts.beneficiaryType) lines.push(`Applicant Type: ${opts.beneficiaryType}`);
  lines.push('');
  if (advisoryNote) {
    lines.push('> Strategy Note (from Agent Summoner):');
    lines.push(`> ${advisoryNote}`);
    lines.push('');
  }

  // Core sections aligned with common EU templates (Horizon Europe style)
  lines.push('## 1. Executive Summary');
  lines.push('- Project overview and value proposition');
  lines.push('- Objectives and expected outcomes');
  lines.push('- Alignment with the call and EU priorities');
  lines.push('');

  lines.push('## 2. Excellence');
  lines.push('### 2.1 Objectives');
  lines.push('- Specific, measurable, achievable, relevant, time-bound (SMART)');
  lines.push('');
  lines.push('### 2.2 Relation to the Work Programme');
  lines.push('- Addressed destinations/topics, scope, and expected outcomes');
  lines.push('');
  lines.push('### 2.3 Concept and Methodology');
  lines.push('- Baseline, innovation, technical approach, and methods');
  lines.push('');
  lines.push('### 2.4 Ambition');
  lines.push('- State of the art vs. proposed advancement; KPIs');
  lines.push('');

  lines.push('## 3. Impact');
  lines.push('### 3.1 Expected Impacts');
  lines.push('- Scientific, economic, societal, and environmental');
  lines.push('');
  lines.push('### 3.2 Measures to Maximise Impact');
  lines.push('- Exploitation, dissemination, communication, stakeholder engagement');
  lines.push('');
  lines.push('### 3.3 Barriers and Enablers');
  lines.push('- Market/regulatory barriers; mitigation strategies');
  lines.push('');

  lines.push('## 4. Implementation');
  lines.push('### 4.1 Work Plan');
  lines.push('- Work packages (WPs), tasks, deliverables, milestones');
  lines.push('- Gantt chart and resources per WP');
  lines.push('');
  lines.push('### 4.2 Management Structure');
  lines.push('- Governance, decision-making, risk management');
  lines.push('');
  lines.push('### 4.3 Consortium and Capacity');
  lines.push('- Partner roles, complementarity, key personnel, infrastructure');
  lines.push('');

  lines.push('## 5. Ethics and Security');
  lines.push('- Ethics screening, data protection (GDPR), security considerations');
  lines.push('');

  lines.push('## 6. Open Science and Data Management');
  lines.push('- FAIR data, repositories, open access strategy, DMP outline');
  lines.push('');

  lines.push('## 7. Gender Equality and Inclusiveness');
  lines.push('- Gender dimension in R&I and team composition');
  lines.push('');

  lines.push('## 8. Budget Summary');
  lines.push('- Personnel, travel, equipment, subcontracting, other direct costs, indirect');
  lines.push('');

  lines.push('## 9. Risk Register');
  lines.push('- Technical, operational, financial risks; likelihood/impact; mitigation');
  lines.push('');

  lines.push('## 10. KPI Dashboard');
  lines.push('- Outputs, outcomes, impact KPIs with baselines/targets');
  lines.push('');

  lines.push('---');
  lines.push('_Generated by EUFM Proposal Template Agent_');

  return lines.join('\n');
}

export class EUFundingProposalAgent extends BaseAgent {
  get type() { return 'EUFundingProposalAgent'; }

  async run(opts: AgentRunOptions, ctx?: AgentContext): Promise<AgentResult> {
    const startedAt = this.now();
    try {
      if (!opts?.input || typeof opts.input !== 'string') {
        throw new Error('Invalid input: expected non-empty string describing the proposal focus');
      }

      if (opts.dryRun) {
        return {
          agentId: this.id,
          requirementId: this.requirementId,
          success: true,
          output: '[Dry run] EUFundingProposalAgent would generate a structured EU proposal template using Agent Summoner analysis.',
          startedAt,
          finishedAt: this.now(),
        };
      }

      console.log(`📄 Generating EU funding proposal template for: ${opts.input}`);

      // Parse lightweight options from input markers, e.g., [programme:Horizon Europe] [call:HE-CL4-...]
      const options: ProposalTemplateOptions = this.parseInlineOptions(opts.input);

      // Integrate with Agent Summoner for contextual strategy/advice.
      // Fail-safe: on any error, continue with generic template.
      let advisoryNote: string | undefined;
      let analyzedDomain: string | undefined;
      try {
        const summoner = new AgentSummoner('proposal_summoner', this.requirementId);
        const analysis = await summoner.analyzeTask(`Generate a proposal template for: ${opts.input}`);
        if ('error' in analysis) throw new Error(analysis.error);
        analyzedDomain = analysis.domain;
        advisoryNote = analysis.successCriteria || analysis.analysisContent?.slice(0, 240);
      } catch (summonErr: any) {
        console.warn('⚠️ Agent Summoner context unavailable, using generic template. Reason:', summonErr?.message || summonErr);
      }

      const title = buildTemplateTitle(opts.input, options, analyzedDomain);
      const template = renderProposalTemplate(title, options, advisoryNote);

      // Persist to logs in a predictable location
      const dir = path.join('logs', 'proposals', 'templates');
      await fs.mkdir(dir, { recursive: true });
      const fileBase = sanitizeFilename(`${Date.now()}_${title}`);
      const filePath = path.join(dir, `${fileBase}.md`);

      await fs.writeFile(filePath, template, 'utf-8');
      console.log(`📝 Proposal template saved to: ${filePath}`);

      return {
        agentId: this.id,
        requirementId: this.requirementId,
        success: true,
        output: `Template generated and saved to ${filePath}`,
        artifacts: { filePath, title, options },
        startedAt,
        finishedAt: this.now(),
      };
    } catch (e: any) {
      const errMsg = e?.message || String(e);
      console.error('❌ EUFundingProposalAgent failed:', errMsg);
      return {
        agentId: this.id,
        requirementId: this.requirementId,
        success: false,
        output: '',
        error: errMsg,
        startedAt,
        finishedAt: this.now(),
      };
    }
  }

  private parseInlineOptions(input: string): ProposalTemplateOptions {
    const opt: ProposalTemplateOptions = {};
    const m = (re: RegExp) => input.match(re)?.[1]?.trim();
    opt.programme = m(/\[programme:([^\]]+)\]/i) || m(/\[program:([^\]]+)\]/i) || undefined;
    opt.callId = m(/\[call:([^\]]+)\]/i) || undefined;
    opt.topic = m(/\[topic:([^\]]+)\]/i) || undefined;
    opt.beneficiaryType = m(/\[beneficiary:([^\]]+)\]/i) || undefined;
    return opt;
  }
}

